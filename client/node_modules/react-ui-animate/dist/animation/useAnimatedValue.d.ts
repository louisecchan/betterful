import { TransitionValueConfig } from '@raidipesh78/re-motion';
declare type Length = number | string;
export interface UseAnimatedValueConfig extends TransitionValueConfig {
}
declare type AssignValue = {
    toValue: Length;
    config?: UseAnimatedValueConfig;
};
export declare type ValueType = Length | AssignValue | ((update: (next: AssignValue) => Promise<any>) => void);
/**
 * `useAnimatedValue` returns an animation value with `.value` and `.currentValue` property which is
 * initialized when passed to argument (`initialValue`). The retured value persist until the lifetime of
 * a component. It doesnot cast any re-renders which can is very good for performance optimization.
 *
 * @param { string | number } initialValue - Initial value
 * @param { UseAnimatedValueConfig } config - Animation configuration object.
 */
export declare function useAnimatedValue(initialValue: Length, config?: UseAnimatedValueConfig): {
    value: ValueType;
    currentValue: number | string;
};
export {};
