/**
 * bin(booleanValue)
 * returns 1 if booleanValue == true and 0 if booleanValue == false
 */
export declare function bin(bool: boolean): 1 | 0;
/**
 * mix(progress, a, b)
 * linear interpolation between a and b
 */
export declare function mix(perc: number, val1: number, val2: number): number;
/**
 * clamp(value, min, max)
 * clamps value for min and max bounds
 */
export declare function clamp(value: number, lowerbound: number, upperbound: number): number;
/**
 * rubberClamp(value, min, max, constant?)
 * constant is optional : default 0.15
 * clamps the value for min and max value and
 * extends beyond min and max values with constant
 * factor to create elastic rubber band effect
 */
export declare function rubberClamp(value: number, lowerbound: number, upperbound: number, constant?: number): number;
/**
 * snapTo(value, velocity, snapPoints[])
 * Calculates the final snapPoint according to given current value,
 * velocity and snapPoints array
 */
export declare function snapTo(value: number, velocity: number, snapPoints: Array<number>): number;
/**
 * move(array, moveIndex, toIndex)
 * move array item from moveIndex to toIndex without array modification
 */
export declare function move(array: Array<any>, moveIndex: number, toIndex: number): any[];
