/**
 * This class implements common easing functions. The math is pretty obscure,
 * but this cool website has nice visual illustrations of what they represent:
 * http://xaedes.de/dev/transitions/
 */
export declare class Easing {
    static step0(n: number): 0 | 1;
    static step1(n: number): 0 | 1;
    static linear(t: number): number;
    static ease(t: number): number;
    static quad(t: number): number;
    static cubic(t: number): number;
    static poly(n: number): (t: number) => number;
    static sin(t: number): number;
    static circle(t: number): number;
    static exp(t: number): number;
    /**
     * A simple elastic interaction, similar to a spring.  Default bounciness
     * is 1, which overshoots a little bit once.  0 bounciness doesn't overshoot
     * at all, and bounciness of N > 1 will overshoot about N times.
     *
     * Wolfram Plots:
     *
     *   http://tiny.cc/elastic_b_1 (default bounciness = 1)
     *   http://tiny.cc/elastic_b_3 (bounciness = 3)
     */
    static elastic(bounciness?: number): (t: number) => number;
    static back(s: number): (t: number) => number;
    static bounce(t: number): number;
    static bezier(x1: number, y1: number, x2: number, y2: number): (t: number) => number;
    static in(easing: (t: number) => number): (t: number) => number;
    /**
     * Runs an easing function backwards.
     */
    static out(easing: (t: number) => number): (t: number) => number;
    /**
     * Makes any easing function symmetrical.
     */
    static inOut(easing: (t: number) => number): (t: number) => number;
}
