import React from 'react';
import { FluidValue } from '../types';
import { styleTrasformKeys } from './TransformStyles';
export declare type AnimatedCSSProperties = {
    [key in keyof React.CSSProperties]: React.CSSProperties[key] | any;
} & {
    [key in typeof styleTrasformKeys[number]]?: number | string | FluidValue | any;
};
export declare type AnimatedHTMLAttributes<T> = {
    [property in keyof React.HTMLAttributes<T>]: React.HTMLAttributes<T>[property] | FluidValue | any;
};
export declare type AnimatedSVGAttributes<T> = {
    [property in keyof React.SVGAttributes<T>]: React.SVGAttributes<T>[property] | FluidValue | any;
};
export declare type AnimatedProps<T> = Omit<AnimatedHTMLAttributes<T> & AnimatedSVGAttributes<T>, 'style'> & {
    style?: AnimatedCSSProperties;
};
declare type WrappedComponentOrTag = React.ComponentType<any> | keyof JSX.IntrinsicElements;
/**
 * Higher order component to make any component animatable
 * @param WrapperComponent
 */
export declare function makeAnimatedComponent<C extends WrappedComponentOrTag>(WrapperComponent: C): React.ForwardRefExoticComponent<Omit<AnimatedHTMLAttributes<C> & AnimatedSVGAttributes<C>, "style"> & {
    style?: AnimatedCSSProperties | undefined;
} & React.RefAttributes<unknown>>;
declare type WithAnimated = {
    [element in keyof JSX.IntrinsicElements]: React.ComponentType<AnimatedProps<element>>;
};
export declare const animated: WithAnimated;
export {};
