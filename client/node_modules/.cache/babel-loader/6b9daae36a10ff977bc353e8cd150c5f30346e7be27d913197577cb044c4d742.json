{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/chanchinghei/Library/Mobile Documents/com~apple~CloudDocs/Documents/Work/Fully Remote \\uD83C\\uDF0E/Options/Coding/Projects/shop/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/chanchinghei/Library/Mobile Documents/com~apple~CloudDocs/Documents/Work/Fully Remote \\uD83C\\uDF0E/Options/Coding/Projects/shop/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoProvider = void 0;\n/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\nvar CryptoProvider = /*#__PURE__*/function () {\n  function CryptoProvider() {\n    _classCallCheck(this, CryptoProvider);\n  }\n  _createClass(CryptoProvider, [{\n    key: \"computeHMACSignature\",\n    value:\n    /**\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    function computeHMACSignature(payload, secret) {\n      throw new Error('computeHMACSignature not implemented.');\n    }\n    /**\n     * Asynchronous version of `computeHMACSignature`. Some implementations may\n     * only allow support async signature computation.\n     *\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n  }, {\n    key: \"computeHMACSignatureAsync\",\n    value: function computeHMACSignatureAsync(payload, secret) {\n      throw new Error('computeHMACSignatureAsync not implemented.');\n    }\n  }]);\n  return CryptoProvider;\n}();\nexports.CryptoProvider = CryptoProvider;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","Object","defineProperty","exports","value","CryptoProvider","key","computeHMACSignature","payload","secret","Error","computeHMACSignatureAsync"],"sources":["/Users/chanchinghei/Library/Mobile Documents/com~apple~CloudDocs/Documents/Work/Fully Remote ðŸŒŽ/Options/Coding/Projects/shop/client/node_modules/stripe/cjs/crypto/CryptoProvider.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoProvider = void 0;\n/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\nclass CryptoProvider {\n    /**\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignature(payload, secret) {\n        throw new Error('computeHMACSignature not implemented.');\n    }\n    /**\n     * Asynchronous version of `computeHMACSignature`. Some implementations may\n     * only allow support async signature computation.\n     *\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignatureAsync(payload, secret) {\n        throw new Error('computeHMACSignatureAsync not implemented.');\n    }\n}\nexports.CryptoProvider = CryptoProvider;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA,wMAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAF,OAAA,qMAAAC,OAAA;AACbE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AAHA,IAIMA,cAAc;EAAA,SAAAA,eAAA;IAAAR,eAAA,OAAAQ,cAAA;EAAA;EAAAL,YAAA,CAAAK,cAAA;IAAAC,GAAA;IAAAF,KAAA;IAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,SAAAG,qBAAqBC,OAAO,EAAEC,MAAM,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;IAC5D;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVI;IAAAJ,GAAA;IAAAF,KAAA,EAWA,SAAAO,0BAA0BH,OAAO,EAAEC,MAAM,EAAE;MACvC,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;IACjE;EAAC;EAAA,OAAAL,cAAA;AAAA;AAELF,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}