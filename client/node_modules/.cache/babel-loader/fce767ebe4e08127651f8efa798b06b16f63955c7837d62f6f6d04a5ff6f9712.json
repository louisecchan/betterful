{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWebhooks = void 0;\nconst Error_js_1 = require(\"./Error.js\");\nfunction createWebhooks(platformFunctions) {\n  const Webhook = {\n    DEFAULT_TOLERANCE: 300,\n    // @ts-ignore\n    signature: null,\n    constructEvent(payload, header, secret, tolerance, cryptoProvider) {\n      this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider);\n      const jsonPayload = payload instanceof Uint8Array ? JSON.parse(new TextDecoder('utf8').decode(payload)) : JSON.parse(payload);\n      return jsonPayload;\n    },\n    async constructEventAsync(payload, header, secret, tolerance, cryptoProvider) {\n      await this.signature.verifyHeaderAsync(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider);\n      const jsonPayload = payload instanceof Uint8Array ? JSON.parse(new TextDecoder('utf8').decode(payload)) : JSON.parse(payload);\n      return jsonPayload;\n    },\n    /**\n     * Generates a header to be used for webhook mocking\n     *\n     * @typedef {object} opts\n     * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n     * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n     * @property {string} secret - Stripe webhook secret 'whsec_...'\n     * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n     * @property {string} signature - Computed webhook signature\n     * @property {CryptoProvider} cryptoProvider - Crypto provider to use for computing the signature if none was provided. Defaults to NodeCryptoProvider.\n     */\n    generateTestHeaderString: function (opts) {\n      if (!opts) {\n        throw new Error_js_1.StripeError({\n          message: 'Options are required'\n        });\n      }\n      opts.timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n      opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\n      opts.cryptoProvider = opts.cryptoProvider || getCryptoProvider();\n      opts.signature = opts.signature || opts.cryptoProvider.computeHMACSignature(opts.timestamp + '.' + opts.payload, opts.secret);\n      const generatedHeader = ['t=' + opts.timestamp, opts.scheme + '=' + opts.signature].join(',');\n      return generatedHeader;\n    }\n  };\n  const signature = {\n    EXPECTED_SCHEME: 'v1',\n    verifyHeader(encodedPayload, encodedHeader, secret, tolerance, cryptoProvider) {\n      const {\n        decodedHeader: header,\n        decodedPayload: payload,\n        details,\n        suspectPayloadType\n      } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n      cryptoProvider = cryptoProvider || getCryptoProvider();\n      const expectedSignature = cryptoProvider.computeHMACSignature(makeHMACContent(payload, details), secret);\n      validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType);\n      return true;\n    },\n    async verifyHeaderAsync(encodedPayload, encodedHeader, secret, tolerance, cryptoProvider) {\n      const {\n        decodedHeader: header,\n        decodedPayload: payload,\n        details,\n        suspectPayloadType\n      } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n      cryptoProvider = cryptoProvider || getCryptoProvider();\n      const expectedSignature = await cryptoProvider.computeHMACSignatureAsync(makeHMACContent(payload, details), secret);\n      return validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType);\n    }\n  };\n  function makeHMACContent(payload, details) {\n    return `${details.timestamp}.${payload}`;\n  }\n  function parseEventDetails(encodedPayload, encodedHeader, expectedScheme) {\n    if (!encodedPayload) {\n      throw new Error_js_1.StripeSignatureVerificationError(encodedHeader, encodedPayload, {\n        message: 'No webhook payload was provided.'\n      });\n    }\n    const suspectPayloadType = typeof encodedPayload != 'string' && !(encodedPayload instanceof Uint8Array);\n    const textDecoder = new TextDecoder('utf8');\n    const decodedPayload = encodedPayload instanceof Uint8Array ? textDecoder.decode(encodedPayload) : encodedPayload;\n    // Express's type for `Request#headers` is `string | []string`\n    // which is because the `set-cookie` header is an array,\n    // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n    // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n    if (Array.isArray(encodedHeader)) {\n      throw new Error('Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.');\n    }\n    if (encodedHeader == null || encodedHeader == '') {\n      throw new Error_js_1.StripeSignatureVerificationError(encodedHeader, encodedPayload, {\n        message: 'No stripe-signature header value was provided.'\n      });\n    }\n    const decodedHeader = encodedHeader instanceof Uint8Array ? textDecoder.decode(encodedHeader) : encodedHeader;\n    const details = parseHeader(decodedHeader, expectedScheme);\n    if (!details || details.timestamp === -1) {\n      throw new Error_js_1.StripeSignatureVerificationError(decodedHeader, decodedPayload, {\n        message: 'Unable to extract timestamp and signatures from header'\n      });\n    }\n    if (!details.signatures.length) {\n      throw new Error_js_1.StripeSignatureVerificationError(decodedHeader, decodedPayload, {\n        message: 'No signatures found with expected scheme'\n      });\n    }\n    return {\n      decodedPayload,\n      decodedHeader,\n      details,\n      suspectPayloadType\n    };\n  }\n  function validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType) {\n    const signatureFound = !!details.signatures.filter(platformFunctions.secureCompare.bind(platformFunctions, expectedSignature)).length;\n    if (!signatureFound) {\n      if (suspectPayloadType) {\n        throw new Error_js_1.StripeSignatureVerificationError(header, payload, {\n          message: 'Webhook payload must be provided as a string or a Buffer (https://nodejs.org/api/buffer.html) instance representing the _raw_ request body.' + 'Payload was provided as a parsed JavaScript object instead. \\n' + 'Signature verification is impossible without access to the original signed material. \\n' + 'Learn more about webhook signing and explore webhook integration examples for various frameworks at ' + 'https://github.com/stripe/stripe-node#webhook-signing'\n        });\n      }\n      throw new Error_js_1.StripeSignatureVerificationError(header, payload, {\n        message: 'No signatures found matching the expected signature for payload.' + ' Are you passing the raw request body you received from Stripe? \\n' + 'Learn more about webhook signing and explore webhook integration examples for various frameworks at ' + 'https://github.com/stripe/stripe-node#webhook-signing'\n      });\n    }\n    const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n    if (tolerance > 0 && timestampAge > tolerance) {\n      // @ts-ignore\n      throw new Error_js_1.StripeSignatureVerificationError(header, payload, {\n        message: 'Timestamp outside the tolerance zone'\n      });\n    }\n    return true;\n  }\n  function parseHeader(header, scheme) {\n    if (typeof header !== 'string') {\n      return null;\n    }\n    return header.split(',').reduce((accum, item) => {\n      const kv = item.split('=');\n      if (kv[0] === 't') {\n        accum.timestamp = parseInt(kv[1], 10);\n      }\n      if (kv[0] === scheme) {\n        accum.signatures.push(kv[1]);\n      }\n      return accum;\n    }, {\n      timestamp: -1,\n      signatures: []\n    });\n  }\n  let webhooksCryptoProviderInstance = null;\n  /**\n   * Lazily instantiate a CryptoProvider instance. This is a stateless object\n   * so a singleton can be used here.\n   */\n  function getCryptoProvider() {\n    if (!webhooksCryptoProviderInstance) {\n      webhooksCryptoProviderInstance = platformFunctions.createDefaultCryptoProvider();\n    }\n    return webhooksCryptoProviderInstance;\n  }\n  Webhook.signature = signature;\n  return Webhook;\n}\nexports.createWebhooks = createWebhooks;","map":{"version":3,"names":["Object","defineProperty","exports","value","createWebhooks","Error_js_1","require","platformFunctions","Webhook","DEFAULT_TOLERANCE","signature","constructEvent","payload","header","secret","tolerance","cryptoProvider","verifyHeader","jsonPayload","Uint8Array","JSON","parse","TextDecoder","decode","constructEventAsync","verifyHeaderAsync","generateTestHeaderString","opts","StripeError","message","timestamp","Math","floor","Date","now","scheme","EXPECTED_SCHEME","getCryptoProvider","computeHMACSignature","generatedHeader","join","encodedPayload","encodedHeader","decodedHeader","decodedPayload","details","suspectPayloadType","parseEventDetails","expectedSignature","makeHMACContent","validateComputedSignature","computeHMACSignatureAsync","expectedScheme","StripeSignatureVerificationError","textDecoder","Array","isArray","Error","parseHeader","signatures","length","signatureFound","filter","secureCompare","bind","timestampAge","split","reduce","accum","item","kv","parseInt","push","webhooksCryptoProviderInstance","createDefaultCryptoProvider"],"sources":["/Users/chanchinghei/Library/Mobile Documents/com~apple~CloudDocs/Documents/Personal/Nerding Out/2023/shoplify/client/node_modules/stripe/cjs/Webhooks.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createWebhooks = void 0;\nconst Error_js_1 = require(\"./Error.js\");\nfunction createWebhooks(platformFunctions) {\n    const Webhook = {\n        DEFAULT_TOLERANCE: 300,\n        // @ts-ignore\n        signature: null,\n        constructEvent(payload, header, secret, tolerance, cryptoProvider) {\n            this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider);\n            const jsonPayload = payload instanceof Uint8Array\n                ? JSON.parse(new TextDecoder('utf8').decode(payload))\n                : JSON.parse(payload);\n            return jsonPayload;\n        },\n        async constructEventAsync(payload, header, secret, tolerance, cryptoProvider) {\n            await this.signature.verifyHeaderAsync(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider);\n            const jsonPayload = payload instanceof Uint8Array\n                ? JSON.parse(new TextDecoder('utf8').decode(payload))\n                : JSON.parse(payload);\n            return jsonPayload;\n        },\n        /**\n         * Generates a header to be used for webhook mocking\n         *\n         * @typedef {object} opts\n         * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n         * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n         * @property {string} secret - Stripe webhook secret 'whsec_...'\n         * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n         * @property {string} signature - Computed webhook signature\n         * @property {CryptoProvider} cryptoProvider - Crypto provider to use for computing the signature if none was provided. Defaults to NodeCryptoProvider.\n         */\n        generateTestHeaderString: function (opts) {\n            if (!opts) {\n                throw new Error_js_1.StripeError({\n                    message: 'Options are required',\n                });\n            }\n            opts.timestamp =\n                Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n            opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\n            opts.cryptoProvider = opts.cryptoProvider || getCryptoProvider();\n            opts.signature =\n                opts.signature ||\n                    opts.cryptoProvider.computeHMACSignature(opts.timestamp + '.' + opts.payload, opts.secret);\n            const generatedHeader = [\n                't=' + opts.timestamp,\n                opts.scheme + '=' + opts.signature,\n            ].join(',');\n            return generatedHeader;\n        },\n    };\n    const signature = {\n        EXPECTED_SCHEME: 'v1',\n        verifyHeader(encodedPayload, encodedHeader, secret, tolerance, cryptoProvider) {\n            const { decodedHeader: header, decodedPayload: payload, details, suspectPayloadType, } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n            cryptoProvider = cryptoProvider || getCryptoProvider();\n            const expectedSignature = cryptoProvider.computeHMACSignature(makeHMACContent(payload, details), secret);\n            validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType);\n            return true;\n        },\n        async verifyHeaderAsync(encodedPayload, encodedHeader, secret, tolerance, cryptoProvider) {\n            const { decodedHeader: header, decodedPayload: payload, details, suspectPayloadType, } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n            cryptoProvider = cryptoProvider || getCryptoProvider();\n            const expectedSignature = await cryptoProvider.computeHMACSignatureAsync(makeHMACContent(payload, details), secret);\n            return validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType);\n        },\n    };\n    function makeHMACContent(payload, details) {\n        return `${details.timestamp}.${payload}`;\n    }\n    function parseEventDetails(encodedPayload, encodedHeader, expectedScheme) {\n        if (!encodedPayload) {\n            throw new Error_js_1.StripeSignatureVerificationError(encodedHeader, encodedPayload, {\n                message: 'No webhook payload was provided.',\n            });\n        }\n        const suspectPayloadType = typeof encodedPayload != 'string' &&\n            !(encodedPayload instanceof Uint8Array);\n        const textDecoder = new TextDecoder('utf8');\n        const decodedPayload = encodedPayload instanceof Uint8Array\n            ? textDecoder.decode(encodedPayload)\n            : encodedPayload;\n        // Express's type for `Request#headers` is `string | []string`\n        // which is because the `set-cookie` header is an array,\n        // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n        // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n        if (Array.isArray(encodedHeader)) {\n            throw new Error('Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.');\n        }\n        if (encodedHeader == null || encodedHeader == '') {\n            throw new Error_js_1.StripeSignatureVerificationError(encodedHeader, encodedPayload, {\n                message: 'No stripe-signature header value was provided.',\n            });\n        }\n        const decodedHeader = encodedHeader instanceof Uint8Array\n            ? textDecoder.decode(encodedHeader)\n            : encodedHeader;\n        const details = parseHeader(decodedHeader, expectedScheme);\n        if (!details || details.timestamp === -1) {\n            throw new Error_js_1.StripeSignatureVerificationError(decodedHeader, decodedPayload, {\n                message: 'Unable to extract timestamp and signatures from header',\n            });\n        }\n        if (!details.signatures.length) {\n            throw new Error_js_1.StripeSignatureVerificationError(decodedHeader, decodedPayload, {\n                message: 'No signatures found with expected scheme',\n            });\n        }\n        return {\n            decodedPayload,\n            decodedHeader,\n            details,\n            suspectPayloadType,\n        };\n    }\n    function validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType) {\n        const signatureFound = !!details.signatures.filter(platformFunctions.secureCompare.bind(platformFunctions, expectedSignature)).length;\n        if (!signatureFound) {\n            if (suspectPayloadType) {\n                throw new Error_js_1.StripeSignatureVerificationError(header, payload, {\n                    message: 'Webhook payload must be provided as a string or a Buffer (https://nodejs.org/api/buffer.html) instance representing the _raw_ request body.' +\n                        'Payload was provided as a parsed JavaScript object instead. \\n' +\n                        'Signature verification is impossible without access to the original signed material. \\n' +\n                        'Learn more about webhook signing and explore webhook integration examples for various frameworks at ' +\n                        'https://github.com/stripe/stripe-node#webhook-signing',\n                });\n            }\n            throw new Error_js_1.StripeSignatureVerificationError(header, payload, {\n                message: 'No signatures found matching the expected signature for payload.' +\n                    ' Are you passing the raw request body you received from Stripe? \\n' +\n                    'Learn more about webhook signing and explore webhook integration examples for various frameworks at ' +\n                    'https://github.com/stripe/stripe-node#webhook-signing',\n            });\n        }\n        const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n        if (tolerance > 0 && timestampAge > tolerance) {\n            // @ts-ignore\n            throw new Error_js_1.StripeSignatureVerificationError(header, payload, {\n                message: 'Timestamp outside the tolerance zone',\n            });\n        }\n        return true;\n    }\n    function parseHeader(header, scheme) {\n        if (typeof header !== 'string') {\n            return null;\n        }\n        return header.split(',').reduce((accum, item) => {\n            const kv = item.split('=');\n            if (kv[0] === 't') {\n                accum.timestamp = parseInt(kv[1], 10);\n            }\n            if (kv[0] === scheme) {\n                accum.signatures.push(kv[1]);\n            }\n            return accum;\n        }, {\n            timestamp: -1,\n            signatures: [],\n        });\n    }\n    let webhooksCryptoProviderInstance = null;\n    /**\n     * Lazily instantiate a CryptoProvider instance. This is a stateless object\n     * so a singleton can be used here.\n     */\n    function getCryptoProvider() {\n        if (!webhooksCryptoProviderInstance) {\n            webhooksCryptoProviderInstance = platformFunctions.createDefaultCryptoProvider();\n        }\n        return webhooksCryptoProviderInstance;\n    }\n    Webhook.signature = signature;\n    return Webhook;\n}\nexports.createWebhooks = createWebhooks;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}